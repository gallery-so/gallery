# Use @goField(forceResolver: true) to lazily handle recursive or expensive fields that shouldn't be
# resolved unless the caller asks for them
directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# Add @authRequired to any field that requires a user to be logged in. NOTE: Any field tagged with
# @authRequired MUST return a union type that includes ErrNotAuthorized.
#
# If we need more control over auth in the future, this directive can be updated to take
# arguments that specify the level of access required.
directive @authRequired on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# Use @scrub on any input field that should be omitted from request logging (e.g. passwords or
# other sensitive data)
directive @scrub on INPUT_FIELD_DEFINITION

# Use @restrictEnvironment to choose which values of the ENV environment variable the annotated field/object
# should be usable in (case-insensitive). Example: @restrictEnvironment(allowed:["local", "development"]) would
# allow a field in "local" and "development" environments but not in "production"
directive @restrictEnvironment(allowed:[String!]!) on INPUT_FIELD_DEFINITION | INPUT_OBJECT | FIELD_DEFINITION | OBJECT

# All types that implement Node must have a unique GqlID set in their "id" field. For types with
# a "dbid" field, it's assumed that we can synthesize a unique ID from the type name and the dbid,
# so those types will automatically have an ID function generated for them (which gqlgen will find
# and bind to). Types without a dbid field, or types that need multiple inputs to create a unique ID
# that can be used to refetch the node in the future, must use the @goGqlId directive to explicitly
# state the fields that will be used to generate the ID. If a named field exists on the object and is
# a string-based type, that field will be used as part of the ID automatically. Otherwise, a manual
# getter method will need to be implemented to retrieve that component of the GqlID.
directive @goGqlId(fields: [String!]!) on OBJECT

# Injects a "Helper<TypeName>Data" struct embed into a generated type. Useful for adding backend-only
# helper data necessary to resolve queries, while keeping that data out of the schema and invisible
# to clients.
directive @goEmbedHelper on OBJECT

scalar Time
scalar Address
scalar PubKey
scalar DBID

interface Node {
    id: ID!
}

interface Error {
    message: String!
}

type GalleryUser implements Node {
    id: ID!
    dbid: DBID!
    username: String
    bio: String
    traits: String

    # Returns all tokens owned by this user. Useful for retrieving all tokens without any duplicates,
    # as opposed to retrieving user -> wallets -> tokens, which would contain duplicates for any token
    # that appears in more than one of the user's wallets.
    tokens: [Token] @goField(forceResolver: true)
    tokensByChain(chain: Chain!): ChainTokens @goField(forceResolver: true)

    wallets: [Wallet] @goField(forceResolver: true)
    galleries: [Gallery] @goField(forceResolver: true)
    badges: [Badge] @goField(forceResolver: true)
    isAuthenticatedUser: Boolean
    followers: [GalleryUser] @goField(forceResolver: true)
    following: [GalleryUser] @goField(forceResolver: true)
}

type Wallet implements Node {
    id: ID!
    dbid: DBID!
    chainAddress: ChainAddress
    chain: Chain
    walletType: WalletType
    tokens: [Token] @goField(forceResolver: true)
}

type ChainAddress {
    address: Address
    chain: Chain
}


type ChainPubKey {
    pubKey: PubKey
    chain: Chain
}

type ChainTokens {
    chain: Chain
    tokens: [Token]
}


input ChainAddressInput {
    address: Address! @goField(forceResolver: true)
    chain: Chain! @goField(forceResolver: true)
}

input ChainPubKeyInput {
    pubKey: PubKey! @goField(forceResolver: true)
    chain: Chain! @goField(forceResolver: true)
}

type Badge {
    name: String
    imageURL: String!
    contract: Contract
}

union GalleryUserOrWallet = GalleryUser | Wallet

union GalleryUserOrAddress = GalleryUser | ChainAddress

union MediaSubtype =
    ImageMedia
    | VideoMedia
    | AudioMedia
    | TextMedia
    | HtmlMedia
    | JsonMedia
    | GltfMedia
    | UnknownMedia
    | SyncingMedia
    | InvalidMedia

type PreviewURLSet {
    raw: String
    thumbnail: String
    small: String
    medium: String
    large: String
    srcSet: String
}

type VideoURLSet {
    raw: String
    small: String
    medium: String
    large: String
}

interface Media {
    # Various sizes of preview images for the media
    previewURLs: PreviewURLSet

    # The original source URL for the media (may be IPFS, etc)
    mediaURL: String

    # The type of media, as determined by the backend. May be redundant given the approach we're using here
    # (media subtypes implementing the Media interface)
    mediaType: String

    # All Media types will also have something like contentRenderURL or contentRenderURLs,
    # which are the URL(s) that should actually be used for rendering the media's content
}

type ImageMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type VideoMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURLs: VideoURLSet
}

type AudioMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type TextMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type HtmlMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type JsonMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type GltfMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type UnknownMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type SyncingMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

type InvalidMedia implements Media {
    previewURLs: PreviewURLSet
    mediaURL: String
    mediaType: String

    contentRenderURL: String
}

enum TokenType {
    ERC721
    ERC1155
    ERC20
}

enum Chain {
    Ethereum
    Arbitrum
    Polygon
    Optimism
    Tezos
    POAP
}
enum WalletType {
    EOA
    GnosisSafe
}

type Token implements Node {
    id: ID!
    dbid: DBID!
    creationTime: Time
    lastUpdated: Time
    collectorsNote: String
    media: MediaSubtype
    tokenType: TokenType
    chain: Chain
    name: String
    description: String
    tokenUri: String
    tokenId: String
    quantity: String # source is a hex string
    owner: GalleryUser @goField(forceResolver: true)
    ownedByWallets: [Wallet] @goField(forceResolver: true)
    ownershipHistory: [OwnerAtBlock]
    tokenMetadata: String # source is map[string]interface{} on backend, not sure what best format is here
    contract: Contract @goField(forceResolver: true)
    externalUrl: String
    blockNumber: String # source is uint64
    isSpamByUser: Boolean
    isSpamByProvider: Boolean
    # These are subject to change; unlike the other fields, they aren't present on the current persist.Token
    # struct and may ultimately end up elsewhere
    creatorAddress: ChainAddress
    openseaCollectionName: String

    # temporary field while we're dependent on opensea
    openseaId: Int
}

type OwnerAtBlock {
    # TODO: will need to store addresses to make this resolver work
    owner: GalleryUserOrAddress @goField(forceResolver: true)
    blockNumber: String # source is uint64
}

type CollectionToken implements Node
@goEmbedHelper
@goGqlId(fields: ["tokenId", "collectionId"]) {
    id: ID!
    token: Token
    collection: Collection
    tokenSettings: CollectionTokenSettings @goField(forceResolver: true)
}

type CollectionLayout {
    sections: [Int]
    sectionLayout: [CollectionSectionLayout]
}

type CollectionSectionLayout {
    columns: Int
    whitespace: [Int]
}

type CollectionTokenSettings {
    renderLive: Boolean
}

type Collection implements Node {
    id: ID!
    dbid: DBID!
    version: Int
    name: String
    collectorsNote: String
    gallery: Gallery @goField(forceResolver: true)
    layout: CollectionLayout
    hidden: Boolean
    tokens: [CollectionToken] @goField(forceResolver: true)
}

type Gallery implements Node {
    id: ID!
    dbid: DBID!
    owner: GalleryUser @goField(forceResolver: true)
    collections: [Collection] @goField(forceResolver: true)
}

type TokenHolder @goEmbedHelper {
    displayName: String
    wallets: [Wallet] @goField(forceResolver: true)
    user: GalleryUser @goField(forceResolver: true)
    previewTokens: [String]
}

type MembershipTier implements Node {
    id: ID!
    dbid: DBID!
    name: String
    assetUrl: String
    tokenId: String
    owners: [TokenHolder]
}

type Community implements Node
@goGqlId(fields: ["contractAddress", "chain"])
@goEmbedHelper {
    dbid: DBID!
    id: ID!

    lastUpdated: Time

    contractAddress: ChainAddress
    creatorAddress: ChainAddress
    chain: Chain
    name: String
    description: String
    previewImage: String
    profileImageURL: String
    profileBannerURL: String
    badgeURL: String

    owners: [TokenHolder] @goField(forceResolver: true)
}

type Contract implements Node {
    id: ID!
    dbid: DBID!

    lastUpdated: Time

    contractAddress: ChainAddress
    creatorAddress: ChainAddress
    chain: Chain
    name: String
    profileImageURL: String
    profileBannerURL: String
    badgeURL: String
}

# We have this extra type in case we need to stick authed data
# in here one day.
type ViewerGallery {
    gallery: Gallery
}

type Viewer {
    user: GalleryUser @goField(forceResolver: true)
    viewerGalleries: [ViewerGallery] @goField(forceResolver: true)
    feed(before: String, after: String, first: Int, last: Int): FeedConnection @goField(forceResolver: true)
}
union UserByUsernameOrError = GalleryUser | ErrUserNotFound | ErrInvalidInput

union UserByIdOrError = GalleryUser | ErrUserNotFound | ErrInvalidInput

union ViewerOrError = Viewer | ErrNotAuthorized

type ErrCollectionNotFound implements Error {
    message: String!
}

union TokenByIdOrError = Token | ErrTokenNotFound

type ErrTokenNotFound implements Error {
    message: String!
}

union CollectionByIdOrError = Collection | ErrCollectionNotFound | ErrInvalidInput

union CollectionTokenByIdOrError =
    CollectionToken
    | ErrCollectionNotFound
    | ErrTokenNotFound

union CommunityByAddressOrError = Community | ErrCommunityNotFound | ErrInvalidInput

type Admire implements Node {
    id: ID!
    dbid: DBID!
    creationTime: Time
    lastUpdated: Time
    admirer: GalleryUser @goField(forceResolver: true)
    # should we include the feed event here?
}

type Comment implements Node {
    id: ID!
    dbid: DBID!
    creationTime: Time
    lastUpdated: Time
    replyTo: Comment @goField(forceResolver: true)
    commenter: GalleryUser @goField(forceResolver: true)
    comment: String
    # should we include the feed event here?
}

# Actions a user can take on a resource
enum Action {
    UserCreated
    UserFollowedUsers
    CollectorsNoteAddedtoToken
    CollectionCreated
    CollectorsNoteAddedToCollection
    TokensAddedToCollection
}

type FollowInfo {
    user: GalleryUser @goField(forceResolver: true)
    followedBack: Boolean
}

interface FeedEventData {
    eventTime: Time
    owner: GalleryUser
    action: Action
}

type FeedEvent implements Node {
    id: ID!
    dbid: DBID!
    eventData: FeedEventData @goField(forceResolver: true)
    admires: [Admire!] @goField(forceResolver: true)
    comments: [Comment!] @goField(forceResolver: true)
}

type UserCreatedFeedEventData implements FeedEventData {
    eventTime: Time
    owner: GalleryUser @goField(forceResolver: true)
    action: Action
}

type UserFollowedUsersFeedEventData implements FeedEventData {
    eventTime: Time
    owner: GalleryUser @goField(forceResolver: true)
    action: Action
    followed: [FollowInfo]
}

type CollectorsNoteAddedToTokenFeedEventData implements FeedEventData {
    eventTime: Time
    owner: GalleryUser @goField(forceResolver: true)
    action: Action
    token: CollectionToken @goField(forceResolver: true)
    newCollectorsNote: String
}

type CollectionCreatedFeedEventData implements FeedEventData @goEmbedHelper {
    eventTime: Time
    owner: GalleryUser @goField(forceResolver: true)
    action: Action
    collection: Collection @goField(forceResolver: true)
    newTokens: [CollectionToken] @goField(forceResolver: true)
}

type CollectorsNoteAddedToCollectionFeedEventData implements FeedEventData {
    eventTime: Time
    owner: GalleryUser @goField(forceResolver: true)
    action: Action
    collection: Collection @goField(forceResolver: true)
    newCollectorsNote: String
}

type TokensAddedToCollectionFeedEventData implements FeedEventData @goEmbedHelper {
    eventTime: Time
    owner: GalleryUser @goField(forceResolver: true)
    collection: Collection @goField(forceResolver: true)
    action: Action
    newTokens: [CollectionToken] @goField(forceResolver: true)
    isPreFeed: Boolean
}

type ErrUnknownAction implements Error {
    message: String!
}

type ErrFeedEventNotFound implements Error {
    message: String!
}

union FeedEventOrError =
    FeedEvent
    | ErrFeedEventNotFound
    | ErrUnknownAction

union FeedEventByIdOrError =
    FeedEvent
    | ErrFeedEventNotFound
    | ErrUnknownAction

type PageInfo {
    size: Int!
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type FeedEdge {
    node: FeedEventOrError
    cursor: String!
}

type FeedConnection @goEmbedHelper {
    edges: [FeedEdge]
    pageInfo: PageInfo! @goField(forceResolver: true)
}

type Query {
    node(id: ID!): Node
    viewer: ViewerOrError @authRequired
    userByUsername(username: String!): UserByUsernameOrError
    userById(id: DBID!): UserByIdOrError
    usersWithTrait(trait: String!): [GalleryUser]
    membershipTiers(forceRefresh: Boolean): [MembershipTier]
    collectionById(id: DBID!): CollectionByIdOrError
    collectionsByIds(ids: [DBID!]!): [CollectionByIdOrError]
    tokenById(id: DBID!): TokenByIdOrError
    collectionTokenById(tokenId: DBID!, collectionId: DBID!): CollectionTokenByIdOrError
    communityByAddress(communityAddress: ChainAddressInput!, forceRefresh: Boolean, onlyGalleryUsers: Boolean): CommunityByAddressOrError
    generalAllowlist: [ChainAddress!]
    galleryOfTheWeekWinners: [GalleryUser!]
    globalFeed(before: String, after: String, first: Int, last: Int): FeedConnection
    feedEventById(id: DBID!): FeedEventByIdOrError
}

input CollectionLayoutInput {
    sections: [Int!]!
    sectionLayout: [CollectionSectionLayoutInput!]!
}

input CollectionSectionLayoutInput {
    columns: Int!
    whitespace: [Int!]!
}

input CollectionTokenSettingsInput {
    tokenId: DBID!
    renderLive: Boolean!
}

input CreateCollectionInput {
    galleryId: DBID!
    name: String!
    collectorsNote: String!
    tokens: [DBID!]!
    layout: CollectionLayoutInput!
    tokenSettings: [CollectionTokenSettingsInput!]!
}

union CreateCollectionPayloadOrError =
    CreateCollectionPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type CreateCollectionPayload {
    collection: Collection
}

union DeleteCollectionPayloadOrError =
    DeleteCollectionPayload
    | ErrNotAuthorized
    | ErrInvalidInput
    | ErrCollectionNotFound

type DeleteCollectionPayload {
    gallery: Gallery
}

input UpdateCollectionInfoInput {
    collectionId: DBID!
    name: String!
    collectorsNote: String!
}

union UpdateCollectionInfoPayloadOrError =
    UpdateCollectionInfoPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type UpdateCollectionInfoPayload {
    collection: Collection
}

input UpdateCollectionTokensInput {
    collectionId: DBID!
    tokens: [DBID!]!
    layout: CollectionLayoutInput!
    tokenSettings: [CollectionTokenSettingsInput!]!
}

union UpdateCollectionTokensPayloadOrError =
    UpdateCollectionTokensPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type UpdateCollectionTokensPayload {
    collection: Collection
}

input UpdateCollectionHiddenInput {
    collectionId: DBID!
    hidden: Boolean!
}

union UpdateCollectionHiddenPayloadOrError =
    UpdateCollectionHiddenPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type UpdateCollectionHiddenPayload {
    collection: Collection
}

input UpdateGalleryCollectionsInput {
    galleryId: DBID!
    collections: [DBID!]!
}

union UpdateGalleryCollectionsPayloadOrError =
    UpdateGalleryCollectionsPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type UpdateGalleryCollectionsPayload {
    gallery: Gallery
}

input UpdateTokenInfoInput {
    tokenId: DBID!
    collectorsNote: String!

    # Optional (for now). Lets the backend know what collection the token was being edited in.
    # Currently used to generate feedbot URLs.
    collectionId: DBID
}

union UpdateTokenInfoPayloadOrError =
    UpdateTokenInfoPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type UpdateTokenInfoPayload {
    token: Token
}

input SetSpamPreferenceInput {
    tokens: [DBID!]!
    isSpam: Boolean!
}

type SetSpamPreferencePayload {
    tokens: [Token] @goField(forceResolver: true)
}

union SetSpamPreferencePayloadOrError =
    SetSpamPreferencePayload
    | ErrNotAuthorized

union AddUserWalletPayloadOrError =
    AddUserWalletPayload
    | ErrAuthenticationFailed
    | ErrNotAuthorized
    | ErrInvalidInput
    | ErrAddressOwnedByUser

type AddUserWalletPayload {
    viewer: Viewer
}

union RemoveUserWalletsPayloadOrError =
    RemoveUserWalletsPayload
    | ErrNotAuthorized
    | ErrInvalidInput

type RemoveUserWalletsPayload {
    viewer: Viewer
}

input UpdateUserInfoInput {
    username: String!
    bio: String!
}

union UpdateUserInfoPayloadOrError =
    UpdateUserInfoPayload
    | ErrNotAuthorized
    | ErrUsernameNotAvailable
    | ErrInvalidInput

type UpdateUserInfoPayload {
    viewer: Viewer
}

union SyncTokensPayloadOrError =
    SyncTokensPayload
    | ErrNotAuthorized
    | ErrSyncFailed

type SyncTokensPayload {
    viewer: Viewer
}

union RefreshTokenPayloadOrError =
    RefreshTokenPayload
    | ErrInvalidInput
    | ErrSyncFailed

type RefreshTokenPayload {
    token: Token
}

union RefreshCollectionPayloadOrError =
    RefreshCollectionPayload
    | ErrInvalidInput
    | ErrSyncFailed

type RefreshCollectionPayload {
    collection: Collection
}

union RefreshContractPayloadOrError =
    RefreshContractPayload
    | ErrInvalidInput
    | ErrSyncFailed

type RefreshContractPayload {
    contract: Contract
}

type AuthNonce {
    nonce: String
    userExists: Boolean
}

union GetAuthNoncePayloadOrError = AuthNonce | ErrDoesNotOwnRequiredToken

type ErrAuthenticationFailed implements Error {
    message: String!
}

type ErrUserAlreadyExists implements Error {
    message: String!
}

type ErrUsernameNotAvailable implements Error {
    message: String!
}

type ErrAddressOwnedByUser implements Error {
    message: String!
}

type ErrUserNotFound implements Error {
    message: String!
}

type ErrCommunityNotFound implements Error {
    message: String!
}

union AuthorizationError =
    ErrNoCookie
    | ErrInvalidToken
    | ErrDoesNotOwnRequiredToken

type ErrNotAuthorized implements Error {
    message: String!
    cause: AuthorizationError!
}

type ErrInvalidInput implements Error {
    message: String!
    parameters: [String!]!
    reasons: [String!]!
}

type ErrNoCookie implements Error {
    message: String!
}

type ErrInvalidToken implements Error {
    message: String!
}

type ErrDoesNotOwnRequiredToken implements Error {
    message: String!
}

type ErrSyncFailed implements Error {
    message: String!
}

input AuthMechanism {
    eoa: EoaAuth
    gnosisSafe: GnosisSafeAuth
    debug: DebugAuth
}

input EoaAuth {
    chainPubKey: ChainPubKeyInput!
    nonce: String!
    signature: String! @scrub
}

# DebugAuth is a local-only authentication mechanism for testing and debugging.
# It creates an authenticator that will return the supplied userId and chainAddresses as if they had been
# successfully authenticated. For existing users, the asUsername parameter may be supplied as a convenience
# method to look up and return their userId and chainAddresses.
input DebugAuth @restrictEnvironment(allowed: ["local"]){
    # Convenience method to authenticate as an existing user.
    # Cannot be used in conjunction with the userId and chainAddresses parameters.
    asUsername: String

    # The userId that will be returned from the resulting authenticator.
    # May be omitted or blank to indicate that there is no user associated with the supplied chainAddresses.
    # Cannot be used in conjunction with the asUsername parameter.
    userId: DBID

    # The chainAddresses that will be returned from the resulting authenticator.
    # Cannot be used in conjunction with the asUsername parameter.
    chainAddresses:[ChainAddressInput!]
}

input GnosisSafeAuth {
    address: Address!
    nonce: String!
}

input DeepRefreshInput {
    chain: Chain!
}

type DeepRefreshPayload {
    chain: Chain
    submitted: Boolean
}

union DeepRefreshPayloadOrError =
    DeepRefreshPayload
    | ErrNotAuthorized

union LoginPayloadOrError =
    LoginPayload
    | ErrUserNotFound
    | ErrAuthenticationFailed
    | ErrDoesNotOwnRequiredToken

type LoginPayload {
    # TODO: Remove userId in favor of viewer
    userId: DBID
    viewer: Viewer
}

type LogoutPayload {
    viewer: Viewer
}

union CreateUserPayloadOrError =
    CreateUserPayload
    | ErrAuthenticationFailed
    | ErrDoesNotOwnRequiredToken
    | ErrUserAlreadyExists
    | ErrUsernameNotAvailable
    | ErrInvalidInput

type CreateUserPayload {
    userId: DBID
    galleryId: DBID
    # TODO: Remove userId and galleryId in favor of viewer
    viewer: Viewer
}

union FollowUserPayloadOrError =
    FollowUserPayload
    | ErrAuthenticationFailed
    | ErrUserNotFound
    | ErrInvalidInput

union UnfollowUserPayloadOrError =
    UnfollowUserPayload
    | ErrAuthenticationFailed
    | ErrUserNotFound
    | ErrInvalidInput

type FollowUserPayload {
    viewer: Viewer
    user: GalleryUser @goField(forceResolver: true)
}

type UnfollowUserPayload {
    viewer: Viewer
    user: GalleryUser @goField(forceResolver: true)
}

union AdmireFeedEventPayloadOrError =
    AdmireFeedEventPayload
    | ErrAuthenticationFailed
    | ErrFeedEventNotFound
    | ErrInvalidInput

union RemoveAdmirePayloadOrError =
    RemoveAdmirePayload
    | ErrAuthenticationFailed
    | ErrFeedEventNotFound
    | ErrInvalidInput

union CommentOnFeedEventPayloadOrError =
    CommentOnFeedEventPayload
    | ErrAuthenticationFailed
    | ErrFeedEventNotFound
    | ErrInvalidInput

union RemoveCommentPayloadOrError =
    RemoveCommentPayload
    | ErrAuthenticationFailed
    | ErrFeedEventNotFound
    | ErrInvalidInput

type AdmireFeedEventPayload {
    viewer: Viewer
    admire: Admire @goField(forceResolver: true)
    feedEvent: FeedEvent @goField(forceResolver: true)
}

type RemoveAdmirePayload {
    viewer: Viewer
    feedEvent: FeedEvent @goField(forceResolver: true)
}

type CommentOnFeedEventPayload {
    viewer: Viewer
    comment: Comment @goField(forceResolver: true)
    replyToComment: Comment @goField(forceResolver: true)
    feedEvent: FeedEvent @goField(forceResolver: true)
}

type RemoveCommentPayload {
    viewer: Viewer
    feedEvent: FeedEvent @goField(forceResolver: true)
}

type Mutation {
    # User Mutations
    addUserWallet(chainAddress: ChainAddressInput!, authMechanism: AuthMechanism!): AddUserWalletPayloadOrError @authRequired
    removeUserWallets(walletIds: [DBID!]!): RemoveUserWalletsPayloadOrError @authRequired
    updateUserInfo(input: UpdateUserInfoInput!): UpdateUserInfoPayloadOrError @authRequired

    # Gallery Mutations
    updateGalleryCollections(input: UpdateGalleryCollectionsInput!): UpdateGalleryCollectionsPayloadOrError @authRequired

    # Collection Mutations
    createCollection(input: CreateCollectionInput!): CreateCollectionPayloadOrError @authRequired
    deleteCollection(collectionId: DBID!): DeleteCollectionPayloadOrError @authRequired
    updateCollectionInfo(input: UpdateCollectionInfoInput!): UpdateCollectionInfoPayloadOrError @authRequired
    updateCollectionTokens(input: UpdateCollectionTokensInput!): UpdateCollectionTokensPayloadOrError @authRequired
    updateCollectionHidden(input: UpdateCollectionHiddenInput!): UpdateCollectionHiddenPayloadOrError @authRequired

    # Token Mutations
    updateTokenInfo(input: UpdateTokenInfoInput!): UpdateTokenInfoPayloadOrError @authRequired
    setSpamPreference(input: SetSpamPreferenceInput!): SetSpamPreferencePayloadOrError @authRequired

    syncTokens(chains: [Chain!], userID: DBID): SyncTokensPayloadOrError @authRequired
    refreshToken(tokenId: DBID!): RefreshTokenPayloadOrError
    refreshCollection(collectionId: DBID!): RefreshCollectionPayloadOrError
    refreshContract(contractId: DBID!): RefreshContractPayloadOrError
    deepRefresh(input: DeepRefreshInput!): DeepRefreshPayloadOrError @authRequired

    getAuthNonce(chainAddress: ChainAddressInput!): GetAuthNoncePayloadOrError

    createUser(authMechanism: AuthMechanism!, username: String!, bio:String): CreateUserPayloadOrError
    login(authMechanism: AuthMechanism!): LoginPayloadOrError
    logout: LogoutPayload

    followUser(userId: DBID!): FollowUserPayloadOrError @authRequired
    unfollowUser(userId: DBID!): UnfollowUserPayloadOrError @authRequired
    admireFeedEvent(feedEventId: DBID!): AdmireFeedEventPayloadOrError @authRequired
    removeAdmire(admireId: DBID!): RemoveAdmirePayloadOrError @authRequired
    commentOnFeedEvent(feedEventId: DBID!, replyToID: DBID, comment: String!): CommentOnFeedEventPayloadOrError @authRequired
    removeComment(commentId: DBID!): RemoveCommentPayloadOrError @authRequired
}