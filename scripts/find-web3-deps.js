/**
 * Script written to help find why certain deps are polluting our bundle sizes
 *
 * The goal of this script is to find out why certain web3 libraries are making their way
 * into our `_app.tsx` bundle. These libraries are fairly big, causing every page
 * to be large whether or not the page actually needs web3 stuff.
 *
 * Keep reading for inline comments
 */

const madge = require('madge');

/**
 * This list was generated by running this command once
 */
const web3Libs = [
  // @ethersproject
  'node_modules/@ethersproject/contracts/lib/index.d.ts',
  'node_modules/@ethersproject/keccak256/lib/index.d.ts',
  'node_modules/@ethersproject/strings/lib/index.d.ts',
  'node_modules/@ethersproject/strings/lib/index.d.ts',
  'node_modules/@ethersproject/providers/lib/index.d.ts',
  'node_modules/@ethersproject/providers/lib/web3-provider.d.ts',

  // Web3React
  'node_modules/@web3-react/core/dist/index.d.ts',
  'node_modules/@web3-react/walletconnect-connector/dist/index.d.ts',
  'node_modules/@web3-react/walletlink-connector/dist/index.d.ts',
  'node_modules/@web3-react/injected-connector/dist/index.d.ts',
  'node_modules/@web3-react/network-connector/dist/index.d.ts',
  'node_modules/@web3-react/core/dist/index.d.ts',
  'node_modules/@web3-react/abstract-connector/dist/index.d.ts',
];

const beaconLibs = ['node_modules/@airgap/beacon-sdk/dist/esm/index.d.ts'];

const offendingLibraries = [...web3Libs, ...beaconLibs];

madge('pages/_app.tsx', {
  tsConfig: './tsconfig.json',
  includeNpm: true,
  baseDir: process.cwd(),
  fileExtensions: ['js', 'ts', 'jsx', 'tsx'],
})
  /**
   * Write an image of our entire applications dependency graph
   * Use this if you want to look for offending libraries
   * My workflow is generally the following
   *
   * 1. Run `ANALYZE=true yarn next build`
   * 2. Get a general sense for what libraries are causing problems
   * 3. Run this script
   * 4. `open madge.svg` (this will open the svg in your browser)
   * 5. `Cmd+F` for libraries that you know are big
   * 6. Copy the dependency from `madge.svg` (Generally looks like `node_modules/@web3-react/abstract-connector/dist/index.d.ts`)
   * 7. Update the `offendingLibraries` and run the script again
   * 8. Now you have a list of dependency paths towards that library
   */
  .then((res) => res.image('madge.svg'))
  .then((writtenImagePath) => {
    console.log('Image written to ' + writtenImagePath);
  })
  // The following code is unrelated to the image writing above
  .then((res) => {
    let chains = [];

    let visited = new Set();

    // Classic DFS on a node
    function visit(id, parent = []) {
      let next = [...parent, id];
      if (visited.has(id)) {
        chains.push(next);
        return;
      }

      visited.add(id);

      let depends = res.depends(id);

      if (depends.length === 0) {
        chains.push(next);
        return;
      }

      for (const depend of depends) {
        visit(depend, next);
      }
    }

    for (const offendingLibrary of offendingLibraries) {
      visit(offendingLibrary, []);
    }

    // Find all the dependency chains that are causing our `_app.tsx` bundle to grow in size
    const chainsPollutingAppFile = chains.filter(
      (chain) => chain[chain.length - 1] === 'pages/_app.tsx'
    );

    console.log(chainsPollutingAppFile);
  });
