import { GetServerSideProps } from 'next';
import { useLazyLoadQuery } from 'react-relay';
import { graphql } from 'relay-runtime';

import { ITEMS_PER_PAGE } from '~/components/Feed/constants';
import { NOTES_PER_PAGE } from '~/components/Feed/Socialize/CommentsModal/CommentsModal';
import { GRID_ITEM_PER_PAGE, LIST_ITEM_PER_PAGE } from '~/constants/community';
import { CommunityNavbar } from '~/contexts/globalLayout/GlobalNavbar/CommunityNavbar/CommunityNavbar';
import { StandardSidebar } from '~/contexts/globalLayout/GlobalSidebar/StandardSidebar';
import { ContractAddressByChainQuery } from '~/generated/ContractAddressByChainQuery.graphql';
import { Chain } from '~/generated/enums';
import { MetaTagProps } from '~/pages/_app';
import GalleryRedirect from '~/scenes/_Router/GalleryRedirect';
import GalleryRoute from '~/scenes/_Router/GalleryRoute';
import CommunityPageScene from '~/scenes/CommunityPage/CommunityPage';
import CommunityPagePresentationScene, {
  CommunityPageDisplayMode,
} from '~/scenes/CommunityPage/CommunityPagePresentation/CommunityPagePresentationScene';

type CommunityPageProps = MetaTagProps & {
  contractAddress: string;
  chain: Chain;
  displayMode: CommunityPageDisplayMode | null;
};

// todo change to real address
const PROHIBITION_CONTRACT_ADDRESS = '0x7e619a01e1a3b3a6526d0e01fbac4822d48f439b';

export default function CommunityPage({ contractAddress, chain, displayMode }: CommunityPageProps) {
  // `useLazyLoadQuery` should use a type that's generated by codegen (which is not currently generated)
  const query = useLazyLoadQuery<ContractAddressByChainQuery>(
    graphql`
      query ContractAddressByChainQuery(
        $communityAddress: ChainAddressInput!
        $forceRefresh: Boolean
        $tokenCommunityFirst: Int!
        $tokenCommunityAfter: String
        $listOwnersFirst: Int!
        $listOwnersAfter: String
        $onlyGalleryUsers: Boolean
        $communityPostsLast: Int!
        $communityPostsBefore: String
        $communityPostsFirst: Int!
        $communityPostsAfter: String
        $interactionsFirst: Int!
        $interactionsAfter: String
        $visibleTokensPerFeedEvent: Int!
      ) {
        ...CommunityPageFragment
        ...CommunityNavbarFragment
        ...StandardSidebarFragment
        ...CommunityPagePresentationSceneFragment
      }
    `,
    {
      communityAddress: {
        address: contractAddress,
        chain: chain,
      },
      forceRefresh: false,
      tokenCommunityFirst: GRID_ITEM_PER_PAGE,
      listOwnersFirst: LIST_ITEM_PER_PAGE,
      onlyGalleryUsers: true,
      communityPostsLast: ITEMS_PER_PAGE,
      communityPostsFirst: 1,
      interactionsFirst: NOTES_PER_PAGE,
      visibleTokensPerFeedEvent: 1,
    }
  );

  if (!contractAddress) {
    // Something went horribly wrong
    return <GalleryRedirect to={{ pathname: '/' }} />;
  }

  if (
    displayMode === CommunityPageDisplayMode.PRESENTATION &&
    contractAddress === PROHIBITION_CONTRACT_ADDRESS
  ) {
    return (
      <GalleryRoute
        navbar={false}
        element={<CommunityPagePresentationScene queryRef={query} />}
        sidebar={false}
        footer={false}
      />
    );
  }

  return (
    <GalleryRoute
      navbar={<CommunityNavbar queryRef={query} />}
      element={<CommunityPageScene queryRef={query} />}
      sidebar={<StandardSidebar queryRef={query} />}
    />
  );
}

export const getServerSideProps: GetServerSideProps<CommunityPageProps> = async ({ query }) => {
  const contractAddress = query?.contractAddress ? (query.contractAddress as string) : '';
  const chain = query?.chain as Chain;
  const displayMode = query?.displayMode as CommunityPageDisplayMode | undefined;

  return {
    props: {
      contractAddress,
      chain,
      displayMode: displayMode ?? null,
    },
  };
};
